package com.app.ui

/**
    Полная структура UI-дерева в Android:
    Когда мы говорим о UI-дереве в Android, то важно учитывать, что элементы пользовательского интерфейса на самом деле являются частью гораздо более сложной структуры. В центре этой структуры находятся такие объекты, как Window и DecorView, которые управляют всей визуальной частью интерфейса приложения. Все UI-компоненты, такие как LinearLayout, TextView, Button и т. д., являются частью более широкого контекста, который начинается с Window.

    Вот более полное описание структуры UI-дерева с учетом этих элементов:

    1. Window
    Каждый экран (или Activity) в Android работает в контексте Window. Это корневой контейнер для всего, что отображается на экране. Window управляет всей визуальной частью UI-приложения и взаимодействует с операционной системой для отображения контента.
    Каждый Activity в Android имеет свой объект Window. Важно отметить, что этот объект существует даже до того, как будет создан основной интерфейс пользователя (например, элементы в XML).
    Когда вы вызываете метод setContentView(), вы фактически назначаете UI для этой Window.
    Window сам по себе может включать в себя дополнительные элементы, такие как панель статуса (status bar), панель навигации и другие системные компоненты. Однако все это скрывается от разработчика, и с точки зрения UI дерева мы часто видим только контент, который находится внутри.

    2. DecorView
    Window содержит компонент, называемый DecorView. Это основной контейнер, в который помещаются все элементы интерфейса. DecorView инкапсулирует элементы, которые являются частью внешнего UI, такие как:

    ContentView — основной контейнер для пользовательского контента.
    ActionBar (если используется) — панель навигации в верхней части экрана.
    StatusBar и NavigationBar — элементы управления и отображения на уровне системы, которые не относятся напрямую к пользовательскому интерфейсу.
    DecorView представляет собой корневой контейнер для всех компонентов интерфейса в Activity.

    3. UI-дерево (View Hierarchy)
    На уровне пользовательского интерфейса (после того как элементы добавлены с помощью setContentView()), начинается собственно иерархия представлений (View Hierarchy). В этом дереве уже находятся такие элементы, как LinearLayout, RelativeLayout, TextView, Button, и так далее.

    Вот как выглядит полная структура UI-дерева, начиная с Window и DecorView, в случае использования стандартного интерфейса:

    Window (корневой контейнер для Activity)
    │
    └── DecorView (главный контейнер для всей UI-структуры)
    │
    ├── FrameLayout (или другой корневой контейнер Activity)
    │   └── LinearLayout (или другой контейнер)
    │       ├── TextView (заголовок)
    │       ├── Button (кнопка)
    │       └── ImageView (изображение)
    │
    └── ActionBar (если используется)

    Подробное объяснение:
    Window: Это объект, который существует на уровне операционной системы и представляет собой окно, в котором отображается весь контент вашего Activity. Каждое Activity имеет свою собственную Window.
    DecorView: Это основной контейнер внутри Window, который будет содержать все остальные компоненты интерфейса, такие как ActionBar (если он есть), панель статуса, панель навигации и, конечно, пользовательский контент, заданный с помощью setContentView().
    ContentView (обычно FrameLayout или другой контейнер): Это область внутри DecorView, которая фактически отображает основной UI-элемент приложения (например, интерфейс, который вы задаете с помощью XML или динамически с помощью кода). Этот контейнер может быть простым (FrameLayout) или более сложным, в зависимости от того, какой контейнер используется для управления макетом (например, LinearLayout, RelativeLayout, ConstraintLayout и т. д.).
    ActionBar: Если используется ActionBar (или Toolbar), он будет частью DecorView, но находится поверх контента в отдельной части окна, как правило, в верхней части экрана. Это стандартный элемент для навигации и действий, например, для отображения кнопок "Назад", "Сохранить" и т. д.
 * */