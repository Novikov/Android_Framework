package com.app.view.custom_view

/**
 * В Android различают два типа представлений (views): Stateful (состояние) и Stateless (без состояния). Они отличаются подходом к управлению состоянием и поведением.
 *
 * Stateful Views (Состояние) Без айдишника работать не будет!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * Определение: Эти представления хранят информацию о своем состоянии. Например, кнопка может быть "нажата" или "не нажата", и эта информация сохраняется даже после изменений в пользовательском интерфейсе или его перерисовки.
 * Примеры: Элементы управления, такие как CheckBox, RadioButton, или SeekBar, которые изменяют свой визуальный вид в зависимости от взаимодействия пользователя.
 * Управление состоянием: Состояние может быть хранится непосредственно в представлении или в модели. Например, при изменении состояния CheckBox, он сам знает, что он активен или неактивен.
 *
 * Stateless Views (Без состояния)
 * Определение: Эти представления не хранят состояние. Они зависят от внешнего источника данных для отображения информации. Если необходимо изменить вид или поведение, это происходит за счет передачи новых данных извне.
 * Примеры: Простые текстовые представления, такие как TextView, которые отображают данные, но не изменяют свое состояние. Если текст нужно изменить, вы просто вызываете метод, передавая новое значение.
 * Управление состоянием: Все изменения состояния управляются извне, например, через ViewModel или другие компоненты архитектуры. Это облегчает тестирование и повторное использование, так как состояние не зависит от внутренней логики представления.
 * Преимущества и недостатки
 *
 * Stateful:
 * Преимущества: Легче управлять, поскольку состояние хранится внутри, что позволяет упрощать логику.
 * Недостатки: Может привести к усложнению кода, особенно при необходимости синхронизации состояния с данными.
 *
 * Stateless:
 * Преимущества: Легче тестировать и повторно использовать, так как они не зависят от внутреннего состояния.
 * Недостатки: Необходимость управления состоянием извне может сделать код более сложным, если взаимодействий много.
 * Заключение
 * Выбор между stateful и stateless представлениями зависит от требований вашего приложения и архитектуры. Использование stateless подхода часто считается более чистым и поддерживаемым, особенно в контексте современных архитектур, таких как MVVM или MVI.
 * */