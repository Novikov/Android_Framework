package com.app.activity

import android.app.Application
import android.util.Log

/**
 * Назначение Application класса:
 * 1)Глобальный контекст: Класс Application предоставляет контекст, который можно использовать для создания объектов,
 * доступных на уровне всего приложения.
 *
 * 2)Инициализация ресурсов: Он подходит для инициализации библиотек и других ресурсов,
 * которые необходимо настроить один раз. DI граф например
 *
 *
 * */
class App : Application() {

    /**
     * Вызывается только один раз на протяжении всего времени работы приложения (при старте приложения)
     * Это хорошее место для инициализации глобальных ресурсов, таких как библиотека, настройка инструментов аналитики и т.д.
     * */
    override fun onCreate() {
        super.onCreate()
        Log.i("ASDASDASDASDASD", "onCreate: ")
    }

    /**
     * Этот метод вызывается, когда приложение завершается, но только в случае,
     * если приложение работает в эмуляторе. На реальных устройствах он обычно не вызывается.
     *
     * В этом методе вы можете освободить ресурсы, если это необходимо, хотя рекомендуется использовать onDestroy()
     * в активности для этой цели.
     * */
    override fun onTerminate() {
        super.onTerminate()
        Log.i("ASDASDASDASDASD", "onTerminate: ")
    }

    /**
     * Этот метод вызывается, когда система определяет, что память недостаточна.
     * Вы можете освободить ресурсы, чтобы помочь системе.
     *
     * Проверил. В режиме don't keep activities данныый метод не вызвался. Возможно из-за нового launcher.
     * */
    override fun onLowMemory() {
        super.onLowMemory()
        Log.i("ASDASDASDASDASD", "onLowMemory: ")
    }

    /**
     * А этот вызвался в don't keep activities
     *
     * Вызывается для уведомления приложения о том, что уровень доступной памяти изменился.
     * Уровень может варьироваться от TRIM_MEMORY_UI_HIDDEN до TRIM_MEMORY_COMPLETE, что дает вам возможность управлять памятью более точно.
     * java
     * */
    override fun onTrimMemory(level: Int) {
        super.onTrimMemory(level)
        Log.i("ASDASDASDASDASD", "onTrimMemory: ")
    }
}