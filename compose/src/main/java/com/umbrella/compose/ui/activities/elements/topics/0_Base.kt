package com.umbrella.compose.ui.activities.elements.topics

fun main(){
    println("Hello")
}
/**
 *  Compose - декларативный UI Framework где мы пишем UI при помощи Composable функций на Kotlin
 *  Декларативный - мы пишем что мы хотим, а не как.
 *  Unidirectional Data Flow подход построения архитектуры который позволяет упростить управление состоянием UI
 *  Его можно ораганизовать и без Compose, но Compose упрощает процесс построения UDF
 *  Compose заставляет думать о:
 *  -Какой UI отобразить
 *  -Как отреагировать на события
 * */

/**
 *  Compose работает в 3 фазы
 *  1)Composition - построение UI дерева
 *  2)Layouting
 *  -Измерение
 *  -Встраивание
 *  3)Drawing - отрисовка на canvas (Некоторые фазы можно пропустить, это расписано в оптимизации)
 * */

/**
 *  Compose UI Tree structure:
 *  Window — это корневой контейнер для отображения всего экрана приложения. В Android приложение всегда привязано к Window, но в Compose это более абстрактный процесс, скрытый внутри setContent.
 *  DecorView — это контейнер, который уже работает на уровне Android и управляет всем UI. В контексте Compose он инкапсулирует все элементы UI и работает с ними как с деревом компонентов.
 *  ComposeRoot — это объект, создаваемый системой Compose, который начинает процесс компоновки UI. Он управляет состоянием всех последующих композируемых функций и передает их в систему рендеринга.
 *  LayoutNode - Compose View
 * */


/**
 *  CustomView создается с помощью Composable функций и базовых строительных блоков Compose
 *  Slot Api используется для модификации CustomView из вне (передача контента заполнения).
 *  Вообщем это возможность для расширения компонентапользователям компонента
 * */

/**
 * Compose поставляется следующими наборами
 *
 * 1)Compose UI - Это основной набор, который предоставляет базовые строительные блоки для создания пользовательского интерфейса
 * Composable функции: функции, которые описывают UI-компоненты.
 * Layout: компоненты для создания структур, таких как Column, Row, Box, ConstraintLayout, и другие.
 * Modifier: позволяет настраивать компоненты UI, например, задавать размеры, отступы, цвета, анимации и т. д.
 * State management: средства для работы с состоянием компонентов, такие как remember, mutableStateOf, derivedStateOf и другие.
 * Theming: возможности для кастомизации визуального оформления приложения через темы, включая цвета, типографику и т. д.
 *
 * 2)Compose Material и Material 3
 * Набор компонентов и стилей, основанный на спецификациях Material Design, для того, чтобы создать интерфейсы, соответствующие общим рекомендациям Google
 *
 * 3)Compose Foundation Основной набор для работы с более сложными аспектами UI
 * Layout elements: такие как ConstraintLayout, адаптированные для декларативного подхода.
 * Gestures: обработка пользовательских жестов, таких как тап, свайпы и другие действия.
 * Drawing and Graphics: для рисования на канвасе, создания кастомных UI-компонентов.
 * Animation: базовые анимации, такие как анимация плавного перехода, изменения размеров, позиционирования и другие.
 *
 *4)Compose Navigation - Набор библиотек для организации навигации в приложении на основе Jetpack Compose. Это позволяет создавать экраны и переходы между ними.
 * NavController: управление навигацией между экранами.
 * NavHost и NavGraph: создание графа навигации.
 * Navigation arguments: передача параметров между экранами.
 *
 * 5)Compose Testing - Набор инструментов для тестирования UI-компонентов, включая:
 * ComposeTestRule: для создания и проверки UI в тестах.
 * Compose assertions: для проверки состояний UI, элементов и взаимодействий.
 * */