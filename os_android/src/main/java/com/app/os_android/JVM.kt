package com.app.os_android

/**

 Java code -> Byte code
 Byte code исполняется в JVM

 JVM позволяет запускать байткод на куче платформ а так же:
 -Поддрежка многопоточности
 -Платформа независимая стандартная библиотека
 -Динамическая загрузка классов ClassLoader (BoothCL PathCL) todo
 -Поддержка рефлексии
 -Механизмы JIT компиляции
 -Сборщик мусора

Reflection возможность посмотреть на свой код в runtime

  JIT компиляция - возможность скомпилировать в машинный код частоиспользуемого куска кода

    todo Garbage collector

  Memory leaks
  -удержание ссылок
  todo  Расписать варианты и почему recycler

  JVM
  Hotspot - часть Open JDK. Скорее всего стоит на пк
  GraalVM - развитие Hotspot. AOT компиляция
  Dalvik - JVM для Android Api < 21
  ART - Android Api >= 21

 todo Расписвать разницу стековой и регистровой JVM

  ART
  Main.java > Main.java (bytecode) > D8/R8 Main.dex > Main.aot > Jvm Android
  D8 уменьшает размер байткода почти в 2 раза
  R8 вырезает все лишнее и то что не используется из нашего кода
  DexLimit 64000 методов на Dalvik

  Aot компиляция работает при установке Apk или в фоне когда системе нечем заняться

  AppBundle отличается от APk оптимизацией ресурсов под устройство. Чтоб не груззить все форматы картинок например

  todo Тип vs Класс

  JMM
  Stack
  -локальные переменные
  -Ссылки на объекты (втч массивы)

  Heap
  -сами объекты

 В Kotlin значения передаются по ссылке, но с некоторыми нюансами. Когда вы передаете в метод примитивные типы (например, Int, Boolean и т. д.), они передаются по значению. Это значит, что метод получает копию значения, и любые изменения не влияют на оригинальную переменную.

 Что касается объектов (например, классов), то при передаче их в метод передается ссылка на объект, но сама ссылка тоже передается по значению. Это значит, что если вы изменяете свойства объекта внутри метода, изменения отразятся на оригинальном объекте. Однако, если вы переназначите ссылку на другой объект внутри метода, это не повлияет на оригинальную ссылку вне метода.

 Таким образом, в зависимости от типа передаваемых данных, поведение может различаться: примитивы — по значению, объекты — по ссылке (но с копированием ссылки).

 * */